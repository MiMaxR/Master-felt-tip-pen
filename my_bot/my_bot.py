import os
import sys
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º –≤ –ø—É—Ç–∏ –ø–æ–∏—Å–∫–∞ Python
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.abspath(os.path.join(current_dir, ".."))
sys.path.insert(0, project_root)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
import base64
import io
from mtranslate import translate
from typing import List, Dict, Any
from telebot import TeleBot, types
from stability_API.stability_ai import ImageGenerationService
from peewee import fn

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

from settings import ProjectSettings
from database.core import CRUDInterface
from database.common.models import db, History


def encrypt(text: str | int, key: int) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –º–µ—Ç–æ–¥–æ–º –¶–µ–∑–∞—Ä—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–ª—é—á–∞.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - text (str | int): –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å. –ú–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —á–∏—Å–ª–æ–º.
    - key (int): –ö–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - str: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.

    """
    text = str(text)
    encrypted_text = ""
    key_length = len(str(key))

    for i, char in enumerate(text):
        shift = int(str(key)[i % key_length])
        if "a" <= char <= "z":
            encrypted_text += chr((ord(char) - ord("a") + shift) % 26 + ord("a"))
        elif "A" <= char <= "Z":
            encrypted_text += chr((ord(char) - ord("A") + shift) % 26 + ord("A"))
        elif "–∞" <= char <= "—è":
            encrypted_text += chr((ord(char) - ord("–∞") + shift) % 32 + ord("–∞"))
        elif "–ê" <= char <= "–Ø":
            encrypted_text += chr((ord(char) - ord("–ê") + shift) % 32 + ord("–ê"))
        else:
            encrypted_text += char

    return encrypted_text


def decrypt(encrypted_text: str | int, key: int) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞, –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–æ–º –¶–µ–∑–∞—Ä—è.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - encrypted_text (str | int): –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ú–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —á–∏—Å–ª–æ–º.
    - key (int): –ö–ª—é—á –¥–ª—è –¥–µ—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    - str: –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.

    """
    encrypted_text = str(encrypted_text)
    decrypted_text = ""
    key_length = len(str(key))

    for i, char in enumerate(encrypted_text):
        shift = int(str(key)[i % key_length])
        if "a" <= char <= "z":
            decrypted_text += chr((ord(char) - ord("a") - shift) % 26 + ord("a"))
        elif "A" <= char <= "Z":
            decrypted_text += chr((ord(char) - ord("A") - shift) % 26 + ord("A"))
        elif "–∞" <= char <= "—è":
            decrypted_text += chr((ord(char) - ord("–∞") - shift) % 32 + ord("–∞"))
        elif "–ê" <= char <= "–Ø":
            decrypted_text += chr((ord(char) - ord("–ê") - shift) % 32 + ord("–ê"))
        else:
            decrypted_text += char

    return decrypted_text


class Bot:
    """
    –ö–ª–∞—Å—Å Telegram-–±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π.

    –ê—Ç—Ä–∏–±—É—Ç—ã:
        token (str): –¢–æ–∫–µ–Ω Telegram Bot API.
        image_generation_service (ImageGenerationService): –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
        crud (object): –û–±—ä–µ–∫—Ç, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –æ–ø–µ—Ä–∞—Ü–∏–∏ CRUD –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        bot (TeleBot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ TeleBot –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Telegram-–±–æ—Ç–∞.
        is_generating (bool): –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –∏–¥–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """

    def __init__(
        self, token: str, image_generation_service: ImageGenerationService, crud
    ) -> None:
        print("Bot is starting...")
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Bot.

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            token (str): –¢–æ–∫–µ–Ω Telegram Bot API.
            image_generation_service (ImageGenerationService): –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
            crud (object): –û–±—ä–µ–∫—Ç, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –æ–ø–µ—Ä–∞—Ü–∏–∏ CRUD –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """

        self.logger = logging.getLogger(__name__)
        self.logger.setLevel(logging.ERROR)
        formatter = logging.Formatter(
            "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
        )
        file_handler = logging.FileHandler("error.log")
        file_handler.setLevel(logging.ERROR)
        file_handler.setFormatter(formatter)
        self.logger.addHandler(file_handler)

        self.token: str = token
        self.bot: TeleBot = TeleBot(token)
        self.image_generation_service: ImageGenerationService = image_generation_service
        self.is_generating: bool = False
        self.crud = crud

    def send_main_menu(self, message: types.Message) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç Telegram.
        """

        try:
            markup: types.ReplyKeyboardMarkup = types.ReplyKeyboardMarkup(
                resize_keyboard=True
            )
            button_generator: types.KeyboardButton = types.KeyboardButton(
                "–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üåÑ"
            )
            button_info: types.KeyboardButton = types.KeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚ùì")
            markup.add(button_generator)
            markup.add(button_info)
            self.bot.send_message(
                message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup
            )
        except Exception as e:
            self.logger.error(f"–í send_main_menu –º–µ—Ç–æ–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    def generate_and_send_image(
        self, message: types.Message, text_description: str
    ) -> None:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç Telegram.
            text_description (str): –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
        """
        try:
            chat_id: int = message.chat.id
            encrypt_id = encrypt(chat_id, chat_id)
            if History.update_token_count(encrypt_id):
                user_name: str = (
                    message.from_user.first_name or message.from_user.username
                )
                generating_message: types.Message = self.bot.send_message(
                    message.chat.id, "–ò–¥—ë—Çüö∂‚Äç‚ôÇÔ∏è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... üòä"
                )
                try:
                    images: List[Dict[str, Any]] = (
                        self.image_generation_service.generate_image(text_description)
                    )
                    for image in images:
                        img_data: bytes = base64.b64decode(image["base64"])
                        img_io: io.BytesIO = io.BytesIO(img_data)
                        self.bot.send_photo(message.chat.id, img_io)
                    self.bot.delete_message(
                        message.chat.id, generating_message.message_id
                    )
                    self.send_main_menu(message)
                    token_count: int = History.get(
                        History.chat_id == encrypt_id
                    ).token_count

                    self.crud.create()(
                        db,
                        History,
                        {
                            "chat_id": encrypt_id,
                            "name": user_name,
                            "number": message.message_id,
                            "message": encrypt(message.text, chat_id),
                            "token_count": token_count,
                        },
                    )
                except Exception as e:
                    self.bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            else:
                self.bot.reply_to(
                    message,
                    "–ê –≤—Å—ë, —É –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –¥–µ–Ω—ë–∫. –¢–æ–∫–µ–Ω—ã –≤–æ—Å—Å—Ç–æ–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è —Ä–∞–∑ –≤ –¥–µ–Ω—å",
                )
        except Exception as e:
            self.logger.error(
                f"–í generate_and_send_image –º–µ—Ç–æ–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            )

    def start(self) -> None:
        """
        –ú–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        –ë–æ—Ç —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã, —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫, –≤—ã–ø–æ–ª–Ω—è—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.
        """

        try:

            @self.bot.message_handler(commands=["start", "menu"])
            def send_welcome(message: types.Message) -> None:
                """
                –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.

                –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
                    message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç Telegram.
                """
                user_id: int = message.chat.id
                user_name: str = (
                    message.from_user.first_name or message.from_user.username
                )

                self.crud.create()(
                    db,
                    History,
                    {
                        "chat_id": encrypt(message.chat.id, message.chat.id),
                        "name": user_name,
                        "number": message.message_id,
                        "message": encrypt(message.text, message.chat.id),
                    },
                )
                welcome_message: str = f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {user_name}üôÉ! –Ø —Ç–≤–æ–π –±–æ—Ç '–ú–∞—Å—Ç–µ—Ä —Ñ–ª–æ–º–∞—Å—Ç–µ—Ä üòâ'. 

    –•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Å–≤–æ–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å, –∏ —è –Ω–∞—Ä–∏—Å—É—é —ç—Ç–æ –¥–ª—è —Ç–µ–±—è!

    –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
    /menu - –º–æ—ë –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    /low - –Ω–∞–∏–º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    /high - –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    /history - –∏—Å—Ç–æ—Ä–∏—è –í–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    /tokens - —Ç–æ–∫–µ–Ω—ã
    /info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
                self.bot.reply_to(message, welcome_message)
                self.send_main_menu(message)

            @self.bot.message_handler(commands=["history"])
            def send_history(message: types.Message) -> None:
                """
                –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤, –∏—Å–∫–ª—é—á–∞—è –∑–∞–ø—Ä–æ—Å—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å '/'.

                –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
                    message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç Telegram.
                """
                user_name: str = (
                    message.from_user.first_name or message.from_user.username
                )
                user_id: int = message.chat.id
                encrypt_id: str = encrypt(message.chat.id, message.chat.id)
                history_entries = (
                    History.select()
                    .where(
                        (History.chat_id == encrypt_id)
                        & ~(History.message.startswith("/"))
                    )
                    .order_by(History.last_generated_at.desc())
                    .limit(10)
                )

                history_text: str = f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}:\n"
                for entry in history_entries:
                    history_text += f"–°–æ–æ–±—â–µ–Ω–∏–µ: {decrypt(entry.message, user_id)}\n"

                self.crud.create()(
                    db,
                    History,
                    {
                        "chat_id": encrypt(message.chat.id, message.chat.id),
                        "name": user_name,
                        "number": message.message_id,
                        "message": encrypt(message.text, message.chat.id),
                    },
                )
                self.bot.send_message(message.chat.id, history_text)

            @self.bot.message_handler(commands=["low"])
            def send_low_months(message: types.Message) -> None:
                """
                –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ—Å—è—Ü —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤.

                –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
                    message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç Telegram.
                """
                user_id: int = message.chat.id
                user_name: str = (
                    message.from_user.first_name or message.from_user.username
                )

                self.crud.create()(
                    db,
                    History,
                    {
                        "chat_id": encrypt(message.chat.id, message.chat.id),
                        "name": user_name,
                        "number": message.message_id,
                        "message": encrypt(message.text, message.chat.id),
                    },
                )
                months = (
                    History.select(
                        fn.strftime("%Y-%m", History.last_generated_at).alias("month"),
                        fn.COUNT(History.id).alias("total_requests"),
                    )
                    .where(
                        (History.chat_id == user_id)
                        & ~(History.message.startswith("/"))
                    )
                    .group_by("month")
                    .order_by("total_requests")
                )

                if months:
                    lowest_month = min(months, key=lambda x: x.total_requests)
                    self.bot.send_message(
                        message.chat.id,
                        f"–ù–∞–∏–º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —É –≤–∞—Å –±—ã–ª–æ –≤ –º–µ—Å—è—Ü–µ {lowest_month.month}, –≤—Å–µ–≥–æ {lowest_month.total_requests} –∑–∞–ø—Ä–æ—Å–æ–≤.",
                    )
                else:
                    self.bot.send_message(
                        message.chat.id,
                        "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —Å–∏–º–≤–æ–ª–∞ '/'.",
                    )

            @self.bot.message_handler(commands=["high"])
            def send_high_months(message: types.Message) -> None:
                """
                –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ—Å—è—Ü —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤.

                –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
                    message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç Telegram.
                """
                user_id: int = message.chat.id
                user_name: str = (
                    message.from_user.first_name or message.from_user.username
                )

                self.crud.create()(
                    db,
                    History,
                    {
                        "chat_id": encrypt(message.chat.id, message.chat.id),
                        "name": user_name,
                        "number": message.message_id,
                        "message": encrypt(message.text, message.chat.id),
                    },
                )
                months = (
                    History.select(
                        fn.strftime("%Y-%m", History.last_generated_at).alias("month"),
                        fn.COUNT(History.id).alias("total_requests"),
                    )
                    .where(
                        (History.chat_id == user_id)
                        & ~(History.message.startswith("/"))
                    )
                    .group_by("month")
                    .order_by("total_requests")
                )

                if months:
                    highest_month = max(months, key=lambda x: x.total_requests)
                    self.bot.send_message(
                        message.chat.id,
                        f"–ù–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —É –≤–∞—Å –±—ã–ª–æ –≤ –º–µ—Å—è—Ü–µ {highest_month.month}, –≤—Å–µ–≥–æ {highest_month.total_requests} –∑–∞–ø—Ä–æ—Å–æ–≤.",
                    )
                else:
                    self.bot.send_message(
                        message.chat.id,
                        "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —Å–∏–º–≤–æ–ª–∞ '/'.",
                    )

            @self.bot.message_handler(
                func=lambda message: message.text == "–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üåÑ"
            )
            def handle_generate_button(message: types.Message) -> None:
                """
                –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ".

                –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
                    message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç Telegram.
                """
                self.is_generating = False
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                button_start_generate = types.KeyboardButton("–ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é üé®")
                button_settings_generate = types.KeyboardButton("–¢–æ–∫–µ–Ω—ã üí∞")
                button_back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é ‚¨ÖÔ∏è")
                markup.add(button_start_generate, button_settings_generate)
                markup.row(button_back)
                self.bot.send_message(
                    message.chat.id,
                    "–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                    reply_markup=markup,
                )

            @self.bot.message_handler(
                func=lambda message: message.text == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ‚ùì"
                or message.text == "/info"
            )
            def handle_generate_button(message: types.Message) -> None:
                """
                –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è".

                –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
                    message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç Telegram.
                """

                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                button_back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é ‚¨ÖÔ∏è")
                markup.add(button_back)
                instruction_text: str = """
                –ü—Ä–∏–≤–µ—Ç! –Ø - –ú–∞—Å—Ç–µ—Ä —Ñ–ª–æ–º–∞—Å—Ç–µ—Ä, –≤–∞—à –ª–∏—á–Ω—ã–π —Ö—É–¥–æ–∂–Ω–∏–∫-–±–æ—Ç! üé®

            –•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Å–≤–æ–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å, –∏ —è –Ω–∞—Ä–∏—Å—É—é —ç—Ç–æ –¥–ª—è —Ç–µ–±—è!

            –í–æ—Ç –º–æ—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üôÉ:
                
                1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üåÑ".
                2. –î–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é üé®".
                3. –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ
                4. –î–æ–∂–¥–∏—Ç–µ—Å—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

            –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ‚ùóÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ. –ù–∞ –¥–µ–Ω—å –¥–∞—ë—Ç—Å—è 50 —Ç–æ–∫–µ–Ω–æ–≤. –û–¥–∏–Ω —Ç–æ–∫–µ–Ω - –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞.
            –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–∫–µ–Ω—ã –º–æ–∂–Ω–æ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –¢–æ–∫–µ–Ω—ã üí∞ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞–≤ /tokens.
            –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /menu.

            –í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ! –ë—É–¥—É —Ä–∞–¥ –í–∞–º –ø–æ–º–æ—á—å ü´†
                """
                self.bot.send_message(
                    message.chat.id, instruction_text, reply_markup=markup
                )

            @self.bot.message_handler(
                func=lambda message: message.text == "–ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é üé®"
                and not self.is_generating
            )
            def handle_generate_start(message: types.Message) -> None:
                """
                –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

                –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
                    message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç Telegram.
                """
                self.is_generating = True
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                button_return_menu = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é ‚¨ÖÔ∏è")
                markup.add(button_return_menu)
                self.bot.send_message(
                    message.chat.id,
                    "–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
                    reply_markup=markup,
                )

            @self.bot.message_handler(
                func=lambda message: message.text == "–¢–æ–∫–µ–Ω—ã üí∞"
                or message.text == "/tokens"
            )
            def handle_generate_settings(message: types.Message) -> None:
                """
                –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–∞—Ö.

                –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
                    message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç Telegram.
                """
                chat_id: str = encrypt(message.chat.id, message.chat.id)
                try:
                    user_history = History.get(History.chat_id == chat_id)
                    remaining_tokens: int = user_history.token_count
                    self.bot.send_message(
                        message.chat.id,
                        f"–ù–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å: {remaining_tokens} —Ç–æ–∫–µ–Ω",
                    )
                except History.DoesNotExist:
                    self.bot.reply_to(message, "–û—à–∏–±–∫–∞: —É –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.")

            @self.bot.message_handler(
                func=lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é ‚¨ÖÔ∏è"
            )
            def handle_return_to_menu(message: types.Message) -> None:
                """
                –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.

                –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
                    message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç Telegram.
                """
                self.send_main_menu(message)

            @self.bot.message_handler(content_types=["text"])
            def handle_generate_description(message: types.Message) -> None:
                """
                –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

                –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
                    message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç Telegram.
                """
                if self.is_generating:
                    try:
                        if message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é ‚¨ÖÔ∏è":
                            self.send_main_menu(message)
                            self.is_generating = False
                        else:
                            text_description: str = message.text
                            if message.from_user.language_code == "ru":
                                text_description = translate(text_description, "en")
                            self.generate_and_send_image(message, text_description)
                            self.is_generating = False
                    except Exception as e:
                        self.bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

            @self.bot.message_handler(func=lambda message: True)
            def handle_other_messages(message: types.Message) -> None:
                """
                –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

                –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
                    message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç Telegram.
                """
                if not self.is_generating:
                    self.bot.reply_to(
                        message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å."
                    )

            self.bot.polling()
        except Exception as e:
            self.logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ start: {str(e)}")


def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    """
    settings: ProjectSettings = ProjectSettings()
    TOKEN: str = settings.bot_token.get_secret_value()
    STABILITY_AI_TOKEN: str = settings.stability_ai_token.get_secret_value()
    STABILITY_AI_URL: str = settings.stability_ai_url

    db.connect()
    db.create_tables([History])

    crud: CRUDInterface = CRUDInterface()

    bot: Bot = Bot(
        TOKEN, ImageGenerationService(STABILITY_AI_TOKEN, STABILITY_AI_URL), crud
    )

    bot.start()


if __name__ == "__main__":
    main()
